================================CLASE 1===========================================
git clone -> Este comando es usado para clonar un repo desde internet y descargarlo a la pc
ctrl + l -> Este shortcout limpia la consola 
ls -> Este comando es para listar en la carpeta actual los archivos o directorios presentes
code carpeta -> Este comando es para abrir esa carpeta con VSC
La tecla TAB, autocompletara los archivos o los comandos
para la consola de powershell: crtl+c para salir del comando y cls para limpiar pantalla

Ir a la carpeta del proyecto, boton derecho, abrir con GitBash y dar al comando code . esto hace se se abra en VSC la carpeta en la que estamos

GIT 
push -> sube archivos
pull -> baja archivos
add -> agrega archivos
commit -> los registra (la pegatina!), parche, mensaje, etc. 
init -> para iniciar un proyecto (no lo usamos aca porque el proyecto ya estaba creado)

Lenguajes:
         Compilados:    pasa por una etapa de empaquetado para que la compu lo pueda interpretar. mas rapido y eficientes.
         interpretados: no tienen la etapa de compilado. Se lee el codigo en tiempo real, linea por linea. son mas lentos 
                        pero se pueden correjir en tiempo real al ir mostrando errores. Como python o JS.


Protocolos de Comunicacion y Servicio:     esta es la base del backend!!!
                                      IP: Ubicacion en la red, puede ser local, puede ser la web, etc (a donde esta la gilada que quiero mandar.)
                                      Puerto: servicio (que es lo que quiero transmitir, cominucar, enviar, etc.)

   como se envia la info   TCP: protocolo de control de transmision: lento pero garantiza que la info llegue. ej: pag web 
                           UDP: protocolo de datagrama de usuario: rapido pero quien sabe si llega, solo me encargo de mandar. ej: videollamada. 

   HTTP: protocolo de tranferencia de hipertexto:  Cabecera: cookies, tokens, info de navegacion (metadatos)
                                                   Verbos: get, post, put, etc. (acciones para manupular el servidor)
                                                   Body:  datos que quiero mandar.

   DNS: servicios de nombre de dominio: traduce de nombres a IPs. ej: lo de doy a la compu un nombre: github.com y el DNS ya sabe cual es su IP 

========================================CLASE 2=========================================

   DOCKER: sirve para crear maquinas virtuales y contenedores (el contenedor va muuucho mas rapido)
          Imagen:      el sistema operativo simulado
          Contenedor:  la imagen siendo ejecutada 
          
          El comando docker run arrancara desde cero un contenedor con una imagen alpine (imagen de linux muy liviana) 
          usando el comando de netcat (nc) con los parametros -v -l que se usaria para verbose que significa mostrar informacion demas y
          listen que se quede escuchando, asi como el -p 8888 para port especificandole el puerto.
          -it es para que sea interactivo, es decir, no se cierre
          --rm es para que luego de ejecutado se elimine el contenedor
           -p 8888:8888 es para hacer mostrar el puerto del host con el contenedor
          --network=host es para especificar que la red sea la misma que la maquina

========================================CLASE 3===============================================          

NODE JS: permite interpretar codigo JS, pero no en un navegador, sino en una computadora. Lo hace a traves del motor V8 de Google. 
        
         ventaja: si mi pagina tiene mucha concurrencia: Si estás recibiendo una gran cantidad de datos concurrentes, tu base de datos puede ahogarse.
                  Node.js maneja fácilmente las conexiones simultáneas, puedes empujar la base de datos escrita a un lado 
                  y tratar con ella más tarde, para proceder como que si esta hubiera sido exitosa.
                  Construcción rápida y escalable de aplicaciones de red, debido a que es capaz de manejar 
                  un gran número de conexiones simultáneas con alto rendimiento, lo que equivale a una alta escalabilidad. 
                  Ademas se adapta tanto al back como al front
                  ej: chats, contadores de likes, etc. 
                 
                  NO quieres usar Node.js para operaciones intensivas de CPU

¿Cual es la diferencia entre trabajar con node.js en consola vs el navegador?

Cuando se ejecuta codigo JS en el navegador tengo acceso a un documento HTML, es decir tengo acceso al DOM. Puedo trabajar con las etiquetas,
botones, y todo lo que tenga que ver con lo visual y por lo tanto manipularlas. 
En cambio en consola no hay etiquetas HTML, solo exiten modulos para interactura con el sistema operativo y no en base a etiquetas de HTML. 

=======================================CLASE 4 ====================================================

OBJETOS: es un tipo de dato que tiene propiedades asociadas a el.  
         Basicamente todo lo que no es un undefined , null , boolean , number o string es un objeto. 
         Un objeto se inicia con {}      
         ej: 
         var myCar = {
                 make: 'Ford',
                 model: 'Mustang',
                 year: 1969
                         };   

        La gracia es que puedo agregar mas objetos o propiedades a este objeto, se pueden modificar, manipular, etc.                  
                        
ARRAYS: o Vectores, es un tipo de objetos que se utilizan cuando almacenamos múltiples valores de una sola variable, 
        mientras que un objeto puede contener múltiples variables con sus valores. Se inicia con []
        ej: [pablo, marcela, rodrigo, juana,] mi array es de personas.
        ej: [  0  ,    1   ,    2   ,    3  ]  segun posicion, comienzan del cero. 


Diferencias entre funciones normales (function) y funciones flecha (arrow =>):

no son muy diferentes en cuanto a su funcionalidad. Pero, en las funciones flecha, this no hace referencia 
a la instancia del objeto en el que se define, sino que hace referencia al ámbito al que this hace referencia externamente. 
Esto significa que las funciones flecha no son la mejor opción a la hora definir un método de un objeto, 
ya que querrás tener acceso al objeto dentro de al función. 

Variable this: se usa en fn no anonimas, (en las anonimas this se encuentra vacia), pero en caso de una fn definida, la variable
               puede acceder a los datos o variablels dentro de la fn o definidos previamente. 


EVENTOS: relacionan una callback a un string.
         En el front:
         Son la manera para controlar las acciones de los visitantes y definir un comportamiento de la página cuando se produzcan. 
         Cuando un usuario visita una página web e interactúa con ella se producen los eventos y con js podemos definir qué queremos 
         que ocurra cuando se produzcan los eventos. 
         ej: cuando se emita un evento tipo "click" se ejecute un evento tipo "mostar".  
         En el back:
         Se usan para crear los servidores. 
         ej: fn (req, res) 


======================================CLASE 5 =====================================================

Como arreglar un MERGING en git. 

CONDICIONALES: 
 
  Los condicionales son bloques de codigo que se ejecutaran apartir de una sentencia verdadera o falsa (condicion)
  
  - La sintaxis para los bloques son: if, else, else if, switch, operador ternario
 
  - Los operadores de union usados para los condicionales son: && (AND) y  || (OR)
  
  - Los operadores de comparacion son:
  
    > mayor que
    >= mayor igual que
    < menor que
    <= menor igual que
    == igual (no estricto) - 18 == "18" -> TRUE
    === igual (estricto, evalua el tipo de dato) - 18 === "18" -> FALSE el primero es un nro y el segundo dato un string
    != desigual o diferente (no estricto)
    !== desigual o diferente (estricto, evalua el tipo de dato)
 
loops y map-functions. 

