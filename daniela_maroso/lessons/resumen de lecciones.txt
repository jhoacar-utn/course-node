================================CLASE 1==============================================================
git clone -> Este comando es usado para clonar un repo desde internet y descargarlo a la pc
ctrl + l -> Este shortcout limpia la consola 
ls -> Este comando es para listar en la carpeta actual los archivos o directorios presentes
code carpeta -> Este comando es para abrir esa carpeta con VSC
La tecla TAB, autocompletara los archivos o los comandos
para la consola de powershell: crtl+c para salir del comando y cls para limpiar pantalla

Ir a la carpeta del proyecto, boton derecho, abrir con GitBash y dar al comando: code . 
esto hace se se abra en VSC la carpeta en la que estamos

GIT 
push -> sube archivos
pull -> baja archivos
add -> agrega archivos
commit -> los registra (la pegatina!), parche, mensaje, etc. 
init -> para iniciar un proyecto (no lo usamos aca porque el proyecto ya estaba creado)

Color code:
GRIS: si una carpeta aparece en gris, es porque no vale la pena subir al git xq es muy pesada, ej. package-lock.json, ademas se bajan de 
toque tonces no vale la pena subirla. 
VERDE: las carpetas verdes son las nuevas.

Lenguajes:
         Compilados:    pasa por una etapa de empaquetado para que la compu lo pueda interpretar. mas rapido y eficientes.
         interpretados: no tienen la etapa de compilado. Se lee el codigo en tiempo real, linea por linea. son mas lentos 
                        pero se pueden correjir en tiempo real al ir mostrando errores. Como python o JS.


Protocolos de Comunicacion y Servicio:     esta es la base del backend!!!
                                      IP: Ubicacion en la red, puede ser local, puede ser la web, etc (a donde esta la gilada que quiero mandar.)
                                      Puerto: servicio (que es lo que quiero transmitir, cominucar, enviar, etc.)

   como se envia la info   TCP: protocolo de control de transmision: lento pero garantiza que la info llegue. ej: pag web 
                           UDP: protocolo de datagrama de usuario: rapido pero quien sabe si llega, solo me encargo de mandar. ej: videollamada. 

   HTTP: protocolo de tranferencia de hipertexto:  Cabecera: cookies, tokens, info de navegacion (metadatos)
                                                   Verbos: get, post, put, etc. (acciones para manupular el servidor)
                                                   Body:  datos que quiero mandar.

   DNS: servicios de nombre de dominio: traduce de nombres a IPs. ej: lo de doy a la compu un nombre: github.com y el DNS ya sabe cual es su IP 

========================================CLASE 2=========================================================

   DOCKER: sirve para crear maquinas virtuales y contenedores (el contenedor va muuucho mas rapido)
          Imagen:      el sistema operativo simulado
          Contenedor:  la imagen siendo ejecutada 
          
          El comando docker run arrancara desde cero un contenedor con una imagen alpine (imagen de linux muy liviana) 
          usando el comando de netcat (nc) con los parametros -v -l que se usaria para verbose que significa mostrar informacion demas y
          listen que se quede escuchando, asi como el -p 8888 para port especificandole el puerto.
          -it es para que sea interactivo, es decir, no se cierre
          --rm es para que luego de ejecutado se elimine el contenedor
           -p 8888:8888 es para hacer mostrar el puerto del host con el contenedor
          --network=host es para especificar que la red sea la misma que la maquina

========================================CLASE 3==========================================================

NODE JS: permite interpretar codigo JS, pero no en un navegador, sino en una computadora. Lo hace a traves del motor V8 de Google. 
        
         ventaja: si mi pagina tiene mucha concurrencia: Si estás recibiendo una gran cantidad de datos concurrentes, tu base de datos puede ahogarse.
                  Node.js maneja fácilmente las conexiones simultáneas, puedes empujar la base de datos escrita a un lado 
                  y tratar con ella más tarde, para proceder como que si esta hubiera sido exitosa.
                  Construcción rápida y escalable de aplicaciones de red, debido a que es capaz de manejar 
                  un gran número de conexiones simultáneas con alto rendimiento, lo que equivale a una alta escalabilidad. 
                  Ademas se adapta tanto al back como al front
                  ej: chats, contadores de likes, etc. 
                 
                  NO quieres usar Node.js para operaciones intensivas de CPU

¿Cual es la diferencia entre trabajar con node.js en consola vs el navegador?

Cuando se ejecuta codigo JS en el navegador tengo acceso a un documento HTML, es decir tengo acceso al DOM. Puedo trabajar con las etiquetas,
botones, y todo lo que tenga que ver con lo visual y por lo tanto manipularlas. 
En cambio en consola no hay etiquetas HTML, solo exiten modulos para interactura con el sistema operativo y no en base a etiquetas de HTML. 

=======================================CLASE 4 ==========================================================

OBJETOS: es un tipo de dato que tiene propiedades asociadas a el.  
         Basicamente todo lo que no es un undefined , null , boolean , number o string es un objeto. 
         Un objeto se inicia con {}      
         ej: 
         var myCar = {
                 make: 'Ford',
                 model: 'Mustang',
                 year: 1969
                         };   

        La gracia es que puedo agregar mas objetos o propiedades a este objeto, se pueden modificar, manipular, etc.                  
                        
ARRAYS: o Vectores, es un tipo de objetos que se utilizan cuando almacenamos múltiples valores de una sola variable, 
        mientras que un objeto puede contener múltiples variables con sus valores. Se inicia con []
        ej: [pablo, marcela, rodrigo, juana,] mi array es de personas.
        ej: [  0  ,    1   ,    2   ,    3  ]  segun posicion, comienzan del cero. 


Diferencias entre funciones normales (function) y funciones flecha (arrow =>):

no son muy diferentes en cuanto a su funcionalidad. Pero, en las funciones flecha, this no hace referencia 
a la instancia del objeto en el que se define, sino que hace referencia al ámbito al que this hace referencia externamente. 
Esto significa que las funciones flecha no son la mejor opción a la hora definir un método de un objeto, 
ya que querrás tener acceso al objeto dentro de al función. 

Variable this: se usa en fn no anonimas, (en las anonimas this se encuentra vacia), pero en caso de una fn definida, la variable
               puede acceder a los datos o variablels dentro de la fn o definidos previamente. 


EVENTOS: relacionan una callback a un string.
         En el front:
         Son la manera para controlar las acciones de los visitantes y definir un comportamiento de la página cuando se produzcan. 
         Cuando un usuario visita una página web e interactúa con ella se producen los eventos y con js podemos definir qué queremos 
         que ocurra cuando se produzcan los eventos. 
         ej: cuando se emita un evento tipo "click" se ejecute un evento tipo "mostar".  
         En el back:
         Se usan para crear los servidores. 
         ej: fn (req, res) 


======================================CLASE 5 ===========================================================

Como arreglar un MERGING en git. (ver clase)

CONDICIONALES: 
 
  Los condicionales son bloques de codigo que se ejecutaran apartir de una sentencia verdadera o falsa (condicion)
  
  - La sintaxis para los bloques son: if, else, else if, switch, operador ternario
 
  - Los operadores de union usados para los condicionales son: && (AND) y  || (OR)
  
  - Los operadores de comparacion son:
  
    > mayor que
    >= mayor igual que
    < menor que
    <= menor igual que
    == igual (no estricto) - 18 == "18" -> TRUE
    === igual (estricto, evalua el tipo de dato) - 18 === "18" -> FALSE el primero es un nro y el segundo dato un string
    != desigual o diferente (no estricto)
    !== desigual o diferente (estricto, evalua el tipo de dato)
 
loops y map-functions. (clase)

====================================CLASE 6==============================================================

Asincronismo:  En algunos casos necesitamos ejecutar codigo no secuencial, este proceso puede producirse en paralelo al resto del 
               codigo. 
               ej: un proceso que lleve tiempo como traer datos de una base de datos o de internet. Este proceso puede tomar tiempo
                   si esta hecho de forma secuencial, el resto de mi codigo no puede seguir funcionando. 
              
Conectamos la compu al telefono: Creamos el servidor en la compu, configuramos el firewall de la compu para que nuestro cel pueda 
                                acceder, copiamos la IP de la compu con el servidor en el telefono (buscador) y deberia aparecer
                                nuestro codigo. (Hola desde el servidor).         
                                Recordamos el concepto que para establecer una conexion necesito una IP y un servidor (e internet)

excepciones: 
            throw: lo agregas cuando, dentro de una funcion, aparece una anomalia y evita que la funcion siga corriendo. 
            try_catch: para evitar que el programa se detenga usamos este comando. 

Clases: Las clases un tipo de funcion especial cuya sintaxis es más clara y simple para crear objetos y lidiar con la herencia en js. 
        se les asocia el metodo constructor que las crea o las inicializa. 

        ej: class Rectangulo {
                constructor(alto, ancho) {
                     this.alto = alto;
                     this.ancho = ancho;
                         }
                       }

Spread Operator: Se utiliza para la obtencion de todas las propiedades o valores de un objeto
                 Puede usarse con funciones, objetos y arrays. 

Hay varias formas de crear OBJETOS. Las mas comunes son: la tradicional vista en la clase 4 y a partir de una funcion (classes/function.js)

PROMESAS: Son procesos asincronos que puede salir bien o mal. 
          Una promesa tiene tres estados:
                                       Pending (pendiente)-> por defecto
                                       Fullfield (completado, resuelto o exitoso)
                                       Rejected (rechazado)
 
         Para controlar las promesas necesitamos invocar dos funciones:

                           .then()    - esta funcion recibe una callback que se ejecutara cuando la promesa se halla resuelto
                           .catch()   - esta funcion recibe una callback que se ejecutar cuando la promesa se halla rechazado

        FETCH: es método global que proporciona una forma fácil y lógica de obtener recursos de forma asíncrona por la red.

              Async_await: espera a que llegue la respues de la promesa que se hizo anteriormente. 
                          ej: codigo se esjecuta, fetch (sacame algo de internet), fn async, await a que me hagas el fetch antes de seguir ejecutando 
                              el codigo.  

        la diferencia entre Then_Catch y Async_Await: 
                                                      la primera, nadie la controla, el codigo se ejecuta nomas. 
                                                      la otra no puede seguir sino se resuelve la promesa. 
       
        AXIOS: es una librería de JS q permite llamada o extraer datos de una URL o HTTP de forma eficiente, 
               por lo que podremos configurar y realizar solicitudes a un servidor y recibiremos respuestas fáciles de procesar.
               - node-modules: aca se alojan las librerias (express, ) 
               - package.json: define la configuracion del proyecto, ej: las dependencias (librerias) 
               - package-lock.json: la libreria en si. En este caso: axios. 

recordamos que los json son una forma de empacar data para extraer de una API o de internet.
       
       Axios está optimizado para facilitar el consumo de servicios web, API REST y que devuelvan datos JSON.


======================================CLASE 7 ===========================================================

EXPRESS: es un framework backend de js. Controla verbos y rutas. 

        Librerias de produccion: se alojan en servidores reales
        Librerias de entorno: o sea que la libreria esta en mi compu

        se pueden mandar archivos estaticos: - express.static():
        .use puede ser cualquier verbo (get, add, etc.)


cuando la cagas con merge podes: git --abort . o  git restore --staged . 

jest --> .test.js (que es y pa sirve, q no entendi na de la clase)











